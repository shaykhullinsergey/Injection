namespace Test
{
	interface IEmptyCreationalBehaviour<TRegister, TResolve>
	{
		IServiceBuilder Singleton();
	}

	interface IParamsCreationalBehaviour<TRegister, TResolve>
	{
		IServiceBuilder Singleton(params object[] args);
	}

	interface IEmptyCastEntity<TRegister> : IEmptyCreationalBehaviour<TRegister, TRegister>, IServiceBuilder
	{
		IEmptyCreationalBehaviour<TRegister, TResolve> As<TResolve>();
	}

	interface IParamsCastEntity<TRegister> : IParamsCreationalBehaviour<TRegister, TRegister>, IServiceBuilder
	{
		IParamsCreationalBehaviour<TRegister, TResolve> As<TResolve>();
	}

	interface INamedEntity<TRegister> : IParamsCastEntity<TRegister>
	{
		IParamsCastEntity<TRegister> Named(string name);
	}

	interface IReturnsNamedEntity<TRegister> : IEmptyCastEntity<TRegister>
	{
		IEmptyCastEntity<TRegister> Named(string name);
	}

	interface IReturnsEntity<TRegister> : IEmptyCastEntity<TRegister>, IServiceBuilder
	{
		IReturnsNamedEntity<TRegister> Returns(Func<IService, TRegister> returns);
	}

	interface IServiceEntity<TRegister> : INamedEntity<TRegister>, IReturnsEntity<TRegister>, IServiceBuilder
	{
	}

	interface IServiceBuilder
	{
		IService Service { get; }
		IServiceEntity<TRegister> Register<TRegister>();
	}

	interface IService
	{
		TResolve Resolve<TResolve>();
		TResolve Resolve<TResolve>(params object[] args);
		IEnumerable<TResolve> ResolveAll<TResolve>();
		IEnumerable<TResolve> ResolveAll<TResolve>(params object[] args);
		void ResolveFor<TResolve>(TResolve resolve);
	}

	class Test
	{
		IServiceBuilder builder;
		
		void Tests()
		{
			var service = builder
				.Register<Test>()
					.Returns(s => null)
					.As<Test>()
					.Singleton()
				.Register<Test>()
					.Named("")
					.As<Test>()
					.Singleton()
				.Register<Test>()
					.Returns(s => null)
					.Named("")
					.As<Test>()
					.Singleton()
				.Register<Test>()
				.Register<Test>()
					.Named("")
				.Register<Test>()
					.Singleton()
				.Service;
		}
	}
}